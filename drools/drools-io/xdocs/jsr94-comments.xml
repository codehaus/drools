<?xml version="1.0"?>

<document>

  <properties>
    <author email="bob@eng.werken.com">bob mcwhirter</author>
    <title>JSR-94 Comments</title>
  </properties>

  <body>
    <section name="Introduction">

      <subsection name="Disclaimer">
      <p>
      These comments are in response to the public review period for
      the JSR-94 Java Rule Engine API 1.0 specification.  Bob McWhirter
      is the author of this page and the opinions expressed herein are
      solely his and do not necessarily represent the opinions held by
      other members or users of the drools community.
      </p>
      </subsection>

      <subsection name="Qualifications">
      <p>
      Bob McWhirter adapted Forgy's Rete algorithm into the Rete-OO
      algorithm for working conveniently with object-oriented constructs. 
      While he has no formal training in the field of rules and inference 
      engines, he is the implementor of the drools Java-based rules engine
      that uses the Rete-OO algorithm.
      </p>

      <p>
      Since the public review release of the JSR-94 distribution, Bob
      has been working to make drools compliant.  Below are his comments.
      </p>
      </subsection>

    </section>

    <section name="General">
    
      <p>
      I am dismayed that the public review distribution does not include
      source code for the javax.rules.* classes and interfaces nor for the
      reference implementation.  Having the source available may have prevented
      many of these comments, questions and requests for clarification.
      </p>

      <p>
      I do commend the JSR expert group for creating and making freely
      available the TCK.  I have thus far not reached a point in development
      to determine its usefulness.
      </p>

    </section>

    <section name="RuleServiceProvider">
    
    <p>
    What is the purpose of the <code>newInstance</code> method?  Why does it
    specify only a a <code>java.lang.Object</code> and not at least a
    <code>RuleServiceProvider</code>?
    </p>

    </section>

    <section name="RuleRuntime and Friends">
   
    <p>
    I would expect the RuleSession-specific constants <code>STATEFUL_SESSION_TYPE</code>
    and <code>STATELESS_SESSION_TYPE</code> to be members of <code>RuleSession</code>,
    instead of <code>RuleRuntime</code>.
    </p>

    <p>
    It seems that the <code>NoSuch...Exception</code> form is used more often
    than <code>..NotFoundException</code> in my observation.  
    </p>

    </section>

    <section name="RuleSession">
   
    <p>
    The <code>getType()</code> method seems to be redundant when the language
    itself supports <code>instanceof</code>.  A user could simply determine 
    if a session was an instance of <code>javax.rules.StatefulRuleSession</code>
    or <code>javax.rules.StatelessRuleSession</code>.  The method adds nothing
    to the API.
    </p>

    </section>

    <section name="StatefulRuleSession">

      <subsection name="addObject(..) and executeRules(..)">
    <p>
    Does the specification intend to explicitly address deeper semantics on 
    the <code>addObject(..)</code>, <code>removeObject(..)</code> and 
    <code>updateObject(..)</code> methods?  The signatures imply that
    these methods simply affect a queue and do not actually result
    in propagation through a Rete network.  With drools, an added object
    is immediate propagated through the Rete network.  Since drools uses
    active fact extraction, the add process may perform deep analysis 
    of objects reachable from the original root object.  This analysis 
    could result in reportable errors.  The signature for <code>addObject(..)</code>
    does not support this use-case.
    </p>

    <p>
    In order to avoid losing reportable errors, the drools binding to
    JSR-94 would require that <code>addObject(..)</code> simply adds
    objects to an internal list and does <i>not</i> immediately
    propagate the objects to the Rete network until <code>executeRules</code> 
    is called.  This would map directly to the drool's
    <a href="./apidocs/org/drools/TransactionalWorkingMemory.html">TransactionalWorkingMemory</a>,
    but leaves no way of implementing the more dynamic
    <a href="./apidocs/org/drools/WorkingMemory.html">WorkingMemory</a> model.
    </p>

    <p>
    Clarification on <code>executeRules(..)</code> is desired.  Does it
    simply fire items that have been placed on the agenda during
    previous calls to <code>addObject(..)</code> or does is this
    method responsible for propagating all objects through the Rete 
    and then firing agenda items?
    </p>

    <p>
    Additionally, the <code>addObject(..)</code> and 
    <code>executeRules(..)</code> methods seem to present an
    asymmetry.  From client-code, <code>addObject(..)</code> will
    not cause any rules to actually fire.  When <code>executeRules(..)</code>
    is called, rule firings may include calls to <code>addObject(..)</code>
    to assert new facts and inferences.  From the documentation of
    <code>executeRules(..)</code> it seems as though objects
    added during rule firing should propagate and possibly add more
    rules to the firing agenda.  Sometimes <code>addObject(..)</code>
    has immediate side-effects (when used within a rule consequence)
    and sometimes it does not (when used from client code).
    </p>
      </subsection>

     <subsection name="getObjects(..) and Handles">

     <p>
     These comments could have been avoided if the source for
     the reference implementation was provided.
     </p>

     <p>
     Since a <code>StatefulRuleSession</code> must associate
     a <code>Handle</code> with every new <code>Object</code>
     that is added, it is conceivable that a hash-based index
     mapping <code>Handle</code> to <code>Object</code> may
     be used.  This would satisfy <code>getObject( handle )</code>'s
     requirements.  The <code>getObjects(..)</code> methods
     return a <code>java.util.List</code> which implies an
     ordered collection.  What ordering semantics are implied,
     if any?  If the order is that in which objects were 
     added using <code>addObject(..)</code>, then a burden
     is placed upon the implementor to maintain an insertion-order
     collection in addition to the hash-based index.  If no
     order is implied and no uniqueness constraints are implied,
     then the weaked <code>java.util.Collection</code>
     interface should be specified as the return type of the
     <code>getObjects(..)</code> methods.
     </p>

     <p>
     If the semantics are insertion-order, then addition
     performance burden is placed upon the implementor as
     removing items using <code>removeObject(..)</code>
     from an ordered list is not efficient.
     </p>

     </subsection>

    </section>

    <section name="RuleExecutionSet and Friends">
   
       <p>
       What, exactly, does "RuleExecutionSet" mean?  It's a mouthful,
       and I don't know what "Execution" in the name really adds.
       Would "RuleBase" or "RuleSet" be sufficient?  It'd provide
       a shorter base to build upon for the admin Provider class 
       and interface names.  Building up to
       <code>RuleExecutionSetUnregisterException</code> gets
       unweildy.
       </p>

       <p>
       The admin exceptions seem to be poorly named in terms
       of verb form.  I suspect that the shorter verb forms were
       used in order to keep the names shorter.  I would suggest
       the following:

       <ul>
         <li>RuleSetCreationException</li>
         <li>RuleSetRegistrationException</li>
         <li>RuleSetUnregistrationException</li>
       </ul>
       </p>
 
    </section>

    <section name="LocalRuleExecutionSetProvider">
   
      <p>
      Once again, the name is too long.
      </p>

      <p>
      Would you please clarify what you mean by "AST"?
      I understand that AST stands for Abstract Syntax Tree.
      Would you consider drool's 
      <a href="./apidocs/org/drools/rule/Rule.html">Rule</a>
      to be an AST?
      </p>

    </section>

    <section name="RuleExecutionSetProvider">

      <p>
      Once again, the name is too long.
      </p>

      <p> 
      The <code>createRuleExecutionSet(..)</code> method that
      accepts an <code>org.w3c.dom.Document</code> shows a 
      bias towards XML formats.  I do not think that requiring
      an XML format of a rule-engine is wise.  This concern 
      doesn't affect the drools projects, but I still feel 
      that these methods should be allowed to throw an
      <code>UnsupportedOperationException</code>.
      </p> 

    </section>

  </body>

</document>

