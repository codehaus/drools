
<rule-set name="test rules"
          xmlns="http://drools.org/rules"
          xmlns:java="http://drools.org/semantics/java">

    <rule name="testAssert" salience="1">
        <parameter identifier="string">
            <java:class type="java.lang.String"/>
        </parameter>

        <java:condition>string.equals( "testAssert" )</java:condition>

        <java:consequence>
            List list = appData.get("rules.fired");
            list.add("testAssert");
            assertObject( new StringBuffer ("testModify") );
        </java:consequence>
    </rule>

    <rule name="testModify" salience="1">
       <parameter identifier="buffer">
           <java:class type="java.lang.StringBuffer"/>
        </parameter>

        <java:condition>buffer.toString().equals( "testModify" )</java:condition>

        <java:consequence>
            List list = appData.get("rules.fired");
            list.add("testModify");
            buffer.setLength(0);
            buffer.append("testRetract");
            modifyObject (buffer);
        </java:consequence>
    </rule>

    <rule name="testRetract:1" salience="2">
        <parameter identifier="buffer">
            <java:class type="java.lang.StringBuffer"/>
        </parameter>

        <java:condition>buffer.toString().equals( "testRetract" )</java:condition>

        <java:consequence>
            List list = appData.get("rules.fired");
            list.add("testRetract");
            retractObject (buffer);
        </java:consequence>
    </rule>

    <rule name="testRetract:2" salience="1">
        <parameter identifier="buffer">
            <java:class type="java.lang.StringBuffer"/>
        </parameter>

        <java:condition>buffer.toString().equals( "testRetract" )</java:condition>

        <java:consequence>
            throw new RuntimeException ("should not fire");
        </java:consequence>
    </rule>

</rule-set>
