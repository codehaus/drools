<?xml version="1.0" encoding="UTF-8"?>
<project
    default="jar-all"
    xmlns:ant="jelly:ant"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:maven="jelly:maven">

    <!-- exclude jdk1.5 projects if jdk1.5 is not present -->
    <preGoal name="build:start">
      <j:if test="${context.getVariable('java.specification.version')  != '1.5'}">
        <echo>jdk1.5 not present so excluding jdk1.5 projects</echo>
        <j:set var="maven.multiproject.excludes"
               value="${drools.jdk5.projects}"/>
      </j:if>

      <j:set var="temp" value="${maven.multiproject.excludes}" />
    </preGoal>

    <!-- After the jar is built copy it to top level target directory -->
    <postGoal name="jar:jar">
      <echo>basedir: ${basedir}</echo>
      <copy todir="${basedir}/../target/"
            file="${maven.build.dir}/${maven.final.name}.jar"/>
    </postGoal>

    <!-- Use mutliproject to build all jars -->
    <goal name="jar-all">
      <mkdir dir="${basedir}/target"/>
      <j:set var="goal" value="jar:jar"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <!-- use multiproject to locally install all jars -->
    <goal name="jar-install-all">
      <mkdir dir="${basedir}/target"/>
      <j:set var="goal" value="jar:install"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="drools:clover">

      <!-- Exclude example projects -->
      <j:set var="temp" value="${maven.multiproject.excludes}" /> <!-- first back up original excludes -->
      <j:set var="maven.multiproject.excludes"
             value="${maven.multiproject.excludes},drools-examples/**,drools-examples-jdk5/** "/> <!-- now exclude examples -->


      <j:set var="maven.clover.database"
             value="${basedir}/target/clover/database/clover_coverage.db"/>

      <j:set var="goal" value="drools:clover" />
      <attainGoal name="multiproject:goal"/>

      <attainGoal name="clover:on"/>
      <attainGoal name="clover:report"/>

      <j:set var="maven.multiproject.excludes" value="${maven.multiproject.excludes}" /> <!-- reset excludes -->
    </goal>

    <goal name="damagecontrol">
      <ant:delete includeEmptyDirs="true" verbose="true">
	      <ant:fileset dir="." includes="drools-*/target"/>
      </ant:delete>
      <attainGoal name="multiproject:install"/>
    </goal>

    <goal name="default">
      <attainGoal name="multiproject:install"/>
    </goal>

    <goal name="clean-all" prereqs="clean-all:prepare">
      <attainGoal name="multiproject:clean"/>
      <attainGoal name="clean"/>
    </goal>

    <goal name="clean-all:prepare">
      <mkdir dir="${maven.build.dir}"/>
      <touch file="${maven.build.dir}/drools-base-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-core-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-examples-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-groovy-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-io-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-java-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-jsr94-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-python-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-smf-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-smftest-${pom.currentVersion}.jar"/>
    </goal>

    <goal name="drools:ydoc" description="Generates Javadoc including cool UMLdiagrams" prereqs="drools:jar-all,drools:get-deps" >
       <javadoc
         destdir="target/docs/apidocs"
         version="false"
         author="false"
         additionalparam="-J-Djava.awt.headless=true">

         <fileset dir=".">
           <include name="drools-*/src/main/**/*.java" />
           <exclude name="drools-examples*/**" />

           <!-- check before excluding jdk5 src -->
           <j:if test="${context.getVariable('java.specification.version')  != '1.5'}"> <!-- hardcoded should ideally use pom -->
             <exclude name="drools-annotation/**" />
           </j:if>
         </fileset>

         <classpath>
           <fileset dir=".">
             <include name="target/dependencies/*.jar" />
           </fileset>

           <!-- use drools-all otherwise classpath is too long at get IOException: createProcess -->
           <path location="./target/drools-all-${pom.currentVersion}.jar" />
           <path location="./target/drools-smftest-${pom.currentVersion}.jar" />

           <!-- check before including jdk5 jars -->
           <j:if test="${context.getVariable('java.specification.version')  == '1.5'}"> <!-- hardcoded should ideally use pom -->
             <path location="./target/drools-annotation-${pom.currentVersion}.jar" />
           </j:if>
         </classpath>

         <doclet
                 name="ydoc.doclets.YStandard">
                 <path>
                   <pathelement location="./ydoc/lib/ydoc.jar" />
                   <pathelement location="./ydoc/lib/class2svg.jar" />
                   <pathelement location="./ydoc/lib/styleed.jar" />
                   <pathelement location="./ydoc/resources"/>
                   <fileset dir=".">
                     <include name="target/dependencies/*.jar" />
                   </fileset>
                   <!-- use drools-all otherwise classpath is too long at get IOException: createProcess -->
                   <pathelement location="./target/drools-all-${pom.currentVersion}.jar" />
                   <path location="./target/drools-smftest-${pom.currentVersion}.jar" />

                   <!-- check before including jdk5 jars -->
                   <j:if test="${context.getVariable('java.specification.version')  == '1.5'}"> <!-- hardcoded should ideally use pom -->
                     <pathelement location="./target/drools-annotation-${pom.currentVersion}.jar" />
                   </j:if>
                 </path>
                 <param name="-generic"    value=""/>
                 <param name="-umlautogen" value=""/>
                 <param name="-filter" value="ydoc.filters.ExcludeFilter"/>
                 <param name="-tag" value="y.precondition"/>
                 <param name="-tag" value="y.postcondition"/>
                 <param name="-tag" value="y.complexity"/>
                 <param name="-tag" value="param"/>
                 <param name="-tag" value="return"/>
                 <param name="-tag" value="see"/>
                 <param name="-tag" value="y.uml"/>
                 <param name="-breakiterator"/>
         </doclet>
       </javadoc>
     </goal>

     <goal name="drools:javadoc" description="Generates Javadoc" prereqs="drools:jar-all,drools:get-deps">
       <javadoc
         destdir="target/docs/apidocs"
         author="false"
         version="false">

         <fileset dir=".">
           <include name="drools-*/src/main/**/*.java" />
           <exclude name="drools-examples*/**" />

           <!-- check before excluding jdk5 jars -->
           <j:if test="${context.getVariable('java.specification.version')  != '1.5'}"> <!-- hardcoded should ideally use pom -->
             <exclude name="drools-annotation/**" />
           </j:if>
         </fileset>

         <classpath>
           <fileset dir=".">
             <include name="target/dependencies/*.jar" />
           </fileset>
           <!-- use drools-all otherwise classpath is too long at get IOException: createProcess -->
           <path location="./target/drools-all-${pom.currentVersion}.jar" />
           <path location="./target/drools-smftest-${pom.currentVersion}.jar" />

            <!-- check before including jdk5 jars -->
           <j:if test="${context.getVariable('java.specification.version')  == '1.5'}"> <!-- hardcoded should ideally use pom -->
             <path location="./target/drools-annotation-${pom.currentVersion}.jar" />
           </j:if>
         </classpath>
       </javadoc>
     </goal>

    <goal name="javadoc-all">
      <u:file name="${basedir}/ydoc/" var="ydoc" />
<!--
      <j:if test="${ydoc.exists() == true}">
        <attainGoal name="drools:ydoc"/>
        <ant:echo level="info" message="Ydoc Javadoc generated: file://${basedir}/target/docs/apidocs/index.html"/>
      </j:if>
-->
      <j:if test="${ydoc.exists() == true}">
        <attainGoal name="drools:javadoc"/>
        <ant:echo level="info" message="Javadoc generated: file://${basedir}/target/docs/apidocs/index.html"/>
      </j:if>

    </goal>

    <goal name="checkstyle-all">
      <j:set var="goal" value="checkstyle:report,maven-jxr-plugin:report,xdoc"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="deploy-snapshot-all">
      <j:set var="goal" value="jar:deploy-snapshot"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="idea-all">
      <attainGoal name="idea:multiproject"/>
    </goal>

    <goal name="eclipse-all">
      <j:set var="goal" value="eclipse"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="crlf-all">
      <j:set var="goal" value="crlf"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="crlf">
      <ant:fixcrlf
        srcdir="${basedir}"
        eol="lf"
        tab="remove"
        tablength="4"
        includes="**/*.*"
        eof="remove"/>
    </goal>

    <!--
      Extracts all the drools-*.jar files to temp/drools-all except the drools-smftest module
      and the drools.conf files. Each drools.conf is then extracted out to
      its own directory temp/drools-conf/<semantic name> where they are all concatenated
      into a single drools-conf file under the temp/drools-all/META-INF.
      The entire contents of temp/drools-all is then jarred up and the
      temp directory deleted.
    -->

  <goal name="drools:jar-all" prereqs="jar-all">
    <mkdir dir="${basedir}/target/all-stage/"/>
      <ant:unjar dest="${basedir}/target/all-stage/drools-all">
        <patternset>
            <exclude name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-*.jar"/>
            <exclude name="target/drools-all-${pom.currentVersion}.jar"/>   <!-- exclude itself -->
            <exclude name="target/drools-smftest-${pom.currentVersion}.jar"/>   <!-- compile time only dependency -->
            <exclude name="target/drools-annotation-${pom.currentVersion}.jar" />  <!-- jdk5 dependency -->
            <exclude name="target/drools-examples-jdk5-${pom.currentVersion}.jar" /> <!-- jdk5 dependency -->
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/base">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-base-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/groovy">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-groovy-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/java">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-java-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/python">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-python-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:concat destfile="${basedir}/target/all-stage/drools-all/META-INF/drools.conf" force="yes">
        <fileset dir="target/all-stage/drools-conf" includes="**/drools.conf" />
      </ant:concat>

      <ant:jar compress="false" destfile="${basedir}/target/drools-all-${pom.currentVersion}.jar" basedir="${basedir}/target/all-stage/drools-all"/>

      <ant:delete includeEmptyDirs="true">
        <fileset dir="${basedir}/target/all-stage"/>
      </ant:delete>
    </goal>

    <goal name="drools:deploy" prereqs="drools:dist">
      <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-javadoc.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}"/>
      </exec>
      <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-javadoc.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}"/>
      </exec>

      <exec dir="." executable="${maven.ssh.executable}">
        <arg line="${maven.ssh.args} ${maven.username}@${pom.siteAddress} 'cd ${pom.siteDirectory} &amp;&amp; tar zxvf drools-${pom.currentVersion}-javadoc.tar.gz &amp;&amp; rm -f drools-LATEST &amp;&amp; ln -s drools-${pom.currentVersion} drools-LATEST'"/>
      </exec>

      <j:set var="goal" value="jar:deploy"/>
      <attainGoal name="multiproject:goal"/>

      <exec dir="${basedir}/target" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-all-${pom.currentVersion}.jar ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/jars/"/>
      </exec>

      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-src.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin-withdeps.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>

      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-src.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin-withdeps.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>

    </goal>

    <!--
        creates .zip and .tar.gz of drools source, also includes compiled drools-*.jar and javadocs
    -->

    <goal name="drools:dist-prepare">
      <ant:mkdir dir="${basedir}/target/dist/"/>
    </goal>

    <goal name="drools:dist" prereqs="drools:dist-prepare,drools:dist-javadoc,drools:dist-bin,drools:dist-bin-withdeps,drools:dist-src">
      <!-- intentionally left blank -->
    </goal>

    <goal name="drools:dist-javadoc" prereqs="drools:dist-prepare,javadoc-all">
        <zip destfile="${basedir}/target/drools-${pom.currentVersion}-javadoc.zip" compression="gzip">
            <zipfileset dir="${basedir}/target/docs/apidocs"
                        prefix="drools-${pom.currentVersion}/apidocs"/>
        </zip>
        <tar destfile="${basedir}/target/drools-${pom.currentVersion}-javadoc.tar.gz" compression="gzip">
            <tarfileset dir="${basedir}/target/docs/apidocs"
                        prefix="drools-${pom.currentVersion}/apidocs"/>
        </tar>
    </goal>

    <goal name="drools:dist-bin" prereqs="drools:dist-prepare,javadoc-all">

      <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin.zip">
    		 <zipfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
    		 <zipfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <zipfileset dir="${basedir}"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </zip>

      <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin.tar.gz" compression="gzip">
    		 <tarfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
    		 <tarfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <tarfileset dir="${basedir}/"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </tar>
    </goal>


		<!--
			creates .zip and .tar.gz of drools source, also includes compiled drools-*.jar and javadocs
			and all dependencies
		-->
    <goal name="drools:dist-bin-withdeps" prereqs="drools:dist-prepare,javadoc-all">
        <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin-withdeps.zip">
            <zipfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
   		    <zipfileset dir="${basedir}/target/dependencies"
                             prefix="drools-${pom.currentVersion}/lib" />
    		<zipfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		<zipfileset dir="${basedir}"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
        </zip>

      <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin-withdeps.tar.gz" compression="gzip">
    		 <tarfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
   		   <tarfileset dir="${basedir}/target/dependencies"
                             prefix="drools-${pom.currentVersion}/lib" />
    		 <tarfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <tarfileset dir="${basedir}/"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </tar>
    </goal>


		<!--
			creates .zip and .tar.gz of drools source
		-->
    <goal name="drools:dist-src" prereqs="drools:dist-prepare,javadoc-all">

        <copy todir="${basedir}/target/src-stage">
            <fileset dir="${basedir}" includes="drools-*/**" />
        </copy>

        <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-src.zip">
            <zipfileset dir="${basedir}/target/src-stage"
                        prefix="drools-${pom.currentVersion}"
                        excludes=".metadata/**, clover/**, **/target/**, **/cachedir/**, **/xdocs/**, **/lib/**" />

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.txt"/>

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.xml"/>

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.properties"/>

            <zipfileset dir="${basedir}/lib"
                        prefix="drools-${pom.currentVersion}/lib"
                        includes="*.jar"/>
        </zip>

        <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-src.tar.gz" compression="gzip">
            <tarfileset dir="${basedir}/target/src-stage"
                        prefix="drools-${pom.currentVersion}"
                        excludes=".metadata/**, clover/**, **/target/**, **/cachedir/**, **/xdocs/**, **/lib/**" />

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.txt"/>

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.xml"/>

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.properties"/>

            <tarfileset dir="${basedir}/lib"
                        prefix="drools-${pom.currentVersion}/lib"
                        includes="*.jar"/>

        </tar>

    </goal>

    <goal name="drools:get-deps">
      <mkdir dir="${basedir}/target/dependencies"/>

      <j:set var="goal" value="get-deps"/>
      <attainGoal name="multiproject:goal"/>

      <copy todir="${basedir}/target/dependencies/">
         <fileset dir="${basedir}/lib" includes="*.jar*" />
      </copy>

    </goal>

</project>

