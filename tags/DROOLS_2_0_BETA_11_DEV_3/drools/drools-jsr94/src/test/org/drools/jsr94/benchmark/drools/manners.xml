<?xml version="1.0" encoding="UTF-8"?>
<!--

The definition of a RuleExecutionSet is not within the scope of the JSR 94.
The implementation given in this file is written for the reference
implementation. A rule engine vendor verifying their rule engine should
modify this file to their specific needs.

Miss Manners is a program which handles the problem of finding an acceptable
seating arrangement for guests at a dinner party.  It will attempt to match
people with the same hobbies, and to seat everyone next to a member of the
opposite sex.  Manners is a small program, which has only few rules, and
employs a depth-first search approach to the problem.

-->
<rules xmlns="http://drools.org/rules" >

    <semantics module="org.drools.semantics.java"/>

    <rule-set name="Miss Manners" xmlns:java="http://drools.org/semantics/java" >

       <!--
       Initialize the root seating element.
       -->
        <rule name="find first seat">
           <parameter identifier="context">
               <java:class type="org.drools.jsr94.benchmark.Context"/>
           </parameter>
           <parameter identifier="guest">
               <java:class type="org.drools.jsr94.benchmark.Guest"/>
           </parameter>

           <condition><java:condition>
              context.isState("start")
           </java:condition></condition>

            <consequence><java:consequence>
               System.out.println("FIRE: find first seat: " + guest);

               import org.drools.jsr94.benchmark.drools.Seating;
               assertObject(new Seating(1, guest, null));

               context.setState("find_seating");
               modifyObject(context);
            </java:consequence></consequence>
        </rule>

       <!--
       Find guest for empty seat.
       -->
       <rule name="find seating">
          <parameter identifier="context">
              <java:class type="org.drools.jsr94.benchmark.Context"/>
          </parameter>
          <parameter identifier="guest">
              <java:class type="org.drools.jsr94.benchmark.Guest"/>
          </parameter>
          <parameter identifier="seating">
              <java:class type="org.drools.jsr94.benchmark.drools.Seating"/>
          </parameter>

          <condition><java:condition>
             context.isState("find_seating")
          </java:condition></condition>

          <condition><java:condition>
             seating.getGuest2() == null
          </java:condition></condition>

          <condition><java:condition>
             !seating.getTabooList().contains(guest)
          </java:condition></condition>

          <condition><java:condition>
             seating.getGuest1().hasOpositeSex(guest)
          </java:condition></condition>

          <condition><java:condition>
             seating.getGuest1().hasSameHobby(guest)
          </java:condition></condition>

          <consequence><java:consequence>
             System.out.println("FIRE: find seating: " + seating + " " + guest);

             Seating nextSeat = new Seating(seating.getSeat2(), guest, seating);
             assertObject(nextSeat);

             seating.setGuest2(guest);
             seating.getTabooList().add(guest);
             seating.setNextSeat(nextSeat);
             modifyObject(seating);

          </java:consequence></consequence>
       </rule>

       <!--
       Reached dead end, try another path.
       -->
       <rule name="try another path">
          <parameter identifier="context">
              <java:class type="org.drools.jsr94.benchmark.Context"/>
          </parameter>
          <parameter identifier="lastSeat">
              <java:class type="org.drools.jsr94.benchmark.LastSeat"/>
          </parameter>
          <parameter identifier="seating">
              <java:class type="org.drools.jsr94.benchmark.drools.Seating"/>
          </parameter>

          <condition><java:condition>
             context.isState("find_seating")
          </java:condition></condition>

          <condition><java:condition>
             lastSeat.getSeat() > seating.getSeat1()
          </java:condition></condition>

          <condition><java:condition>
             seating.getGuest2() == null
          </java:condition></condition>

          <consequence><java:consequence>
             System.out.println("FIRE: try another path: " + seating);

             Seating prevSeat = seating.getPrevSeat();
             prevSeat.setGuest2(null);
             modifyObject(prevSeat);

             retractObject(seating);
          </java:consequence></consequence>
       </rule>

       <!--
       All seats are taken.
       -->
       <rule name="we are done">
          <parameter identifier="context">
              <java:class type="org.drools.jsr94.benchmark.Context"/>
          </parameter>
          <parameter identifier="lastSeat">
              <java:class type="org.drools.jsr94.benchmark.LastSeat"/>
          </parameter>
          <parameter identifier="seating">
              <java:class type="org.drools.jsr94.benchmark.drools.Seating"/>
          </parameter>

          <condition><java:condition>
             context.isState("find_seating")
          </java:condition></condition>

          <condition><java:condition>
             lastSeat.getSeat() == seating.getSeat1()
          </java:condition></condition>

          <consequence><java:consequence>
             System.out.println("FIRE: we are done");

             import org.drools.jsr94.benchmark.Seat;
             List list = new ArrayList();
             while(seating != null) {
                Seat seat = new Seat(seating.getSeat1(), seating.getGuest1().getName());
                seating = seating.getPrevSeat();
                list.add(seat);
             }

             for (int i = list.size(); i > 0; i--) {
                Seat seat = (Seat)list.get(i-1);
                System.out.println(seat);
                assertObject(seat);
             }

             context.setState("all_done");
             modifyObject(context);
          </java:consequence></consequence>
       </rule>

    </rule-set>

</rules>
