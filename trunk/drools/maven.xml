<?xml version="1.0" encoding="UTF-8"?>

<project
    default="jar-all"
    xmlns:ant="jelly:ant"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:maven="jelly:maven">

    <postGoal name="jar:jar">
      <echo>basedir: ${basedir}</echo>
      <copy todir="${basedir}/../target/"
            file="${maven.build.dir}/${maven.final.name}.jar"/>
    </postGoal>

    <goal name="jar-all">
      <mkdir dir="${basedir}/target"/>
      <j:set var="goal" value="jar:jar"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="jar-install-all">
      <mkdir dir="${basedir}/target"/>
      <j:set var="goal" value="jar:install"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="damagecontrol">
      <ant:delete includeEmptyDirs="true" verbose="true">
	      <ant:fileset dir="." includes="drools-*/target"/>
      </ant:delete>
      <attainGoal name="multiproject:install"/>
    </goal>

    <goal name="default">
      <attainGoal name="multiproject:install"/>
    </goal>

    <goal name="clean-all" prereqs="clean-all:prepare">
      <attainGoal name="multiproject:clean"/>
      <attainGoal name="clean"/>
    </goal>

    <goal name="clean-all:prepare">
      <mkdir dir="${maven.build.dir}"/>
      <touch file="${maven.build.dir}/drools-base-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-core-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-examples-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-groovy-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-io-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-java-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-jsr94-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-python-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-smf-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-smftest-${pom.currentVersion}.jar"/>
    </goal>

    <goal name="tweak-compile.src.set">
      <ant:path id="uber.compile.src.set">
        <ant:pathelement path="drools-base/src/main"/>
        <ant:pathelement path="drools-core/src/main"/>
        <ant:pathelement path="drools-io/src/main"/>
        <ant:pathelement path="drools-smf/src/main"/>
        <ant:pathelement path="drools-java/src/main"/>
        <ant:pathelement path="drools-jsr94/src/main"/>
        <ant:pathelement path="drools-groovy/src/main"/>
        <ant:pathelement path="drools-python/src/main"/>
        <ant:pathelement path="drools-annotation/src/main"/>
        <ant:pathelement path="drools-smftest/src/main"/>
      </ant:path>

      <maven:addPath id="maven.compile.src.set"
                  refid="uber.compile.src.set"/>

      <ant:path id="extra.dependency.path">
        <fileset dir="lib/">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="target/">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="target/dependencies/">
          <include name="*.jar"/>
        </fileset>
      </ant:path>

      <maven:addPath id="maven.dependency.classpath"
                  refid="extra.dependency.path"/>
    </goal>

      <goal name="ydoc-all" description="Generates Javadoc including cool UMLdiagrams">
         <attainGoal name="tweak-compile.src.set"/>
         <javadoc
           destdir="target/docs/apidocs"
           author="true"
           additionalparam="-J-Djava.awt.headless=true">

           <ant:classpath>
             <ant:path refid="maven.dependency.classpath"/>
           </ant:classpath>

           <fileset dir=".">
             <include name="drools-*/src/main/**/*.java" />
           </fileset>

           <doclet
                   name="ydoc.doclets.YStandard">
                   <ant:path>
                     <ant:pathelement location="./ydoc/lib/ydoc.jar" />
                     <ant:pathelement location="./ydoc/lib/class2svg.jar" />
                     <ant:pathelement location="./ydoc/lib/styleed.jar" />
                     <ant:pathelement location="./ydoc/resources"/>
                     <ant:path refid="maven.dependency.classpath"/>
                   </ant:path>
                   <param name="-generic"    value=""/>
                   <param name="-umlautogen" value=""/>
                   <param name="-filter" value="ydoc.filters.ExcludeFilter"/>
                   <param name="-tag" value="y.precondition"/>
                   <param name="-tag" value="y.postcondition"/>
                   <param name="-tag" value="y.complexity"/>
                   <param name="-tag" value="param"/>
                   <param name="-tag" value="return"/>
                   <param name="-tag" value="see"/>
                   <param name="-tag" value="y.uml"/>
                   <param name="-breakiterator"/>
           </doclet>
         </javadoc>
       </goal>

    <goal name="javadoc-all" prereqs="jar-all,drools:get-deps">
      <attainGoal name="tweak-compile.src.set"/>
      <u:file name="${basedir}/ydoc/" var="ydoc" />

      <j:if test="${ydoc.exists() == true}">
        <attainGoal name="ydoc-all"/>
        <ant:echo level="info" message="Ydoc Javadoc generated: file://${basedir}/target/docs/apidocs/index.html"/>
      </j:if>

      <j:if test="${ydoc.exists() != true}">
        <attainGoal name="javadoc"/>
        <ant:echo level="info" message="Javadoc generated: file://${basedir}/target/docs/apidocs/index.html"/>
      </j:if>

    </goal>

    <goal name="checkstyle-all">
      <j:set var="goal" value="checkstyle:report,maven-jxr-plugin:report,xdoc"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="deploy-snapshot-all">
      <j:set var="goal" value="jar:deploy-snapshot"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="idea-all">
      <attainGoal name="idea:multiproject"/>
    </goal>

    <goal name="eclipse-all">
      <j:set var="goal" value="eclipse"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="crlf-all">
      <j:set var="goal" value="crlf"/>
      <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="crlf">
      <ant:fixcrlf
        srcdir="${basedir}"
        eol="lf"
        tab="remove"
        tablength="4"
        includes="**/*.*"
        eof="remove"/>
    </goal>

    <!--
      Extracts all the drools-*.jar files to temp/drools-all except the drools-smftest module
      and the drools.conf files. Each drools.conf is then extracted out to
      its own directory temp/drools-conf/<semantic name> where they are all concatenated
      into a single drools-conf file under the temp/drools-all/META-INF.
      The entire contents of temp/drools-all is then jarred up and the
      temp directory deleted.
    -->

  <goal name="drools:jar-all" prereqs="jar-all">
    <mkdir dir="${basedir}/target/all-stage/"/>
      <ant:unjar dest="${basedir}/target/all-stage/drools-all">
        <patternset>
            <exclude name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-*.jar"/>
            <exclude name="target/drools-smftest.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/base">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-annotation-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/groovy">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-groovy-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/java">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-java-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:unjar dest="${basedir}/target/all-stage/drools-conf/python">
        <patternset>
            <include name="**/drools.conf"/>
        </patternset>
        <fileset dir="${basedir}">
            <include name="target/drools-python-${pom.currentVersion}.jar"/>
        </fileset>
      </ant:unjar>

      <ant:concat destfile="${basedir}/target/all-stage/drools-all/META-INF/drools.conf" force="yes">
        <fileset dir="target/all-stage/drools-conf" includes="**/drools.conf" />
      </ant:concat>

      <ant:jar destfile="${basedir}/target/drools-all-${pom.currentVersion}.jar" basedir="${basedir}/target/all-stage/drools-all"/>

      <ant:delete includeEmptyDirs="true">
        <fileset dir="${basedir}/target/all-stage"/>
      </ant:delete>
    </goal>

    <goal name="drools:deploy" prereqs="drools:dist">
      <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-javadoc.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}"/>
      </exec>
      <exec dir="${maven.build.dir}" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-javadoc.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}"/>
      </exec>

      <exec dir="." executable="${maven.ssh.executable}">
        <arg line="${maven.ssh.args} ${maven.username}@${pom.siteAddress} 'cd ${pom.siteDirectory} &amp;&amp; tar zxvf drools-${pom.currentVersion}-javadoc.tar.gz &amp;&amp; rm -f drools-LATEST &amp;&amp; ln -s drools-${pom.currentVersion} drools-LATEST'"/>
      </exec>

      <j:set var="goal" value="jar:deploy"/>
      <attainGoal name="multiproject:goal"/>

      <exec dir="${basedir}/target" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-all-${pom.currentVersion}.jar ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/jars/"/>
      </exec>

      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-src.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin-withdeps.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>

      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-src.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>
      <exec dir="${maven.build.dir}/dist" executable="${maven.scp.executable}">
        <arg line="${maven.scp.args} drools-${pom.currentVersion}-bin-withdeps.tar.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
      </exec>

    </goal>

		<!--
			creates .zip and .tar.gz of drools source, also includes compiled drools-*.jar and javadocs
		-->

    <goal name="drools:dist-prepare">
      <ant:mkdir dir="${basedir}/target/dist/"/>
    </goal>

    <goal name="drools:dist" prereqs="drools:dist-prepare,drools:dist-javadoc,drools:dist-bin,drools:dist-bin-withdeps,drools:dist-src,drools:jar-all">
      <!-- intentionally left blank -->
    </goal>

    <goal name="drools:dist-javadoc" prereqs="drools:dist-prepare,javadoc-all">
        <zip destfile="${basedir}/target/drools-${pom.currentVersion}-javadoc.zip" compression="gzip">
            <zipfileset dir="${basedir}/target/docs/apidocs"
                        prefix="drools-${pom.currentVersion}/apidocs"/>
        </zip>
        <tar destfile="${basedir}/target/drools-${pom.currentVersion}-javadoc.tar.gz" compression="gzip">
            <tarfileset dir="${basedir}/target/docs/apidocs"
                        prefix="drools-${pom.currentVersion}/apidocs"/>
        </tar>
    </goal>

    <goal name="drools:dist-bin" prereqs="drools:dist-prepare,javadoc-all">

      <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin.zip">
    		 <zipfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
    		 <zipfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <zipfileset dir="${basedir}"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </zip>

      <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin.tar.gz" compression="gzip">
    		 <tarfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
    		 <tarfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <tarfileset dir="${basedir}/"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </tar>
    </goal>


		<!--
			creates .zip and .tar.gz of drools source, also includes compiled drools-*.jar and javadocs
			and all dependencies
		-->
    <goal name="drools:dist-bin-withdeps" prereqs="drools:dist-prepare,javadoc-all">

      <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin-withdeps.zip">
    		 <zipfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
   		   <zipfileset dir="${basedir}/target/dependencies"
                             prefix="drools-${pom.currentVersion}/lib" />
    		 <zipfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <zipfileset dir="${basedir}"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </zip>

      <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-bin-withdeps.tar.gz" compression="gzip">
    		 <tarfileset dir="${basedir}/target/docs"
                             prefix="drools-${pom.currentVersion}/docs" />
   		   <tarfileset dir="${basedir}/target/dependencies"
                             prefix="drools-${pom.currentVersion}/lib" />
    		 <tarfileset dir="${basedir}/target/"
                             prefix="drools-${pom.currentVersion}/lib"
                             includes="drools-*.jar"/>
    		 <tarfileset dir="${basedir}/"
                             prefix="drools-${pom.currentVersion}"
                             includes="*.txt"/>
      </tar>
    </goal>


		<!--
			creates .zip and .tar.gz of drools source
		-->
    <goal name="drools:dist-src" prereqs="drools:dist-prepare,javadoc-all">

        <copy todir="${basedir}/target/src-stage">
            <fileset dir="${basedir}" includes="drools-*/**" />
        </copy>

        <zip destfile="${basedir}/target/dist/drools-${pom.currentVersion}-src.zip">
            <zipfileset dir="${basedir}/target/src-stage"
                        prefix="drools-${pom.currentVersion}"
                        excludes=".metadata/**, clover/**, **/target/**, **/cachedir/**, **/xdocs/**, **/lib/**" />

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.txt"/>

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.xml"/>

            <zipfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.properties"/>

            <zipfileset dir="${basedir}/lib"
                        prefix="drools-${pom.currentVersion}/lib"
                        includes="*.jar"/>
        </zip>

        <tar destfile="${basedir}/target/dist/drools-${pom.currentVersion}-src.tar.gz" compression="gzip">
            <tarfileset dir="${basedir}/target/src-stage"
                        prefix="drools-${pom.currentVersion}"
                        excludes=".metadata/**, clover/**, **/target/**, **/cachedir/**, **/xdocs/**, **/lib/**" />

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.txt"/>

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.xml"/>

            <tarfileset dir="${basedir}/"
                        prefix="drools-${pom.currentVersion}"
                        includes="*.properties"/>

            <tarfileset dir="${basedir}/lib"
                        prefix="drools-${pom.currentVersion}/lib"
                        includes="*.jar"/>

        </tar>

    </goal>

    <goal name="drools:get-deps">
      <mkdir dir="${basedir}/target/dependencies/"/>
      <j:set var="goal" value="get-deps"/>
      <attainGoal name="multiproject:goal"/>
    </goal>


    <!-- Hacks to support building with multiple JDKs. See also project.properties. -->
    <!--  - TODO Optimize postGoals that do not need to fork a new maven. -->
    <!--  - TODO Check if the 'goal' variable is available to postGoals. -->
    <!--  - TODO How to handle 'drools:jar-all'? -->
    <!--  - TODO How to handle 'damagecontrol'? -->

    <postGoal name="jar-all">
      <j:set var="goal" value="jar:jar"/>
      <attainGoal name="drools-jdk5-maven"/>
    </postGoal>

    <postGoal name="jar-install-all">
      <j:set var="goal" value="jar:install"/>
      <attainGoal name="drools-jdk5-maven"/>
    </postGoal>

    <postGoal name="checkstyle-all">
      <j:set var="goal" value="checkstyle:report,maven-jxr-plugin:report,xdoc"/>
      <attainGoal name="drools-jdk5-maven"/>
    </postGoal>

    <postGoal name="deploy-snapshot-all">
      <j:set var="goal" value="jar:deploy-snapshot"/>
      <attainGoal name="drools-jdk5-maven"/>
    </postGoal>

    <postGoal name="eclipse-all">
      <j:set var="goal" value="eclipse"/>
      <attainGoal name="drools-jdk5-maven"/>
    </postGoal>

    <postGoal name="crlf-all">
      <j:set var="goal" value="crlf"/>
      <attainGoal name="drools-jdk5-mavenl"/>
    </postGoal>

    <postGoal name="clean-all:prepare">
      <touch file="${maven.build.dir}/drools-annotation-${pom.currentVersion}.jar"/>
      <touch file="${maven.build.dir}/drools-annotation-examples-${pom.currentVersion}.jar"/>
    </postGoal>

    <preGoal name="clean-all">
      <j:set var="goal" value="clean:clean"/>
      <attainGoal name="drools-jdk5-maven"/>
    </preGoal>

    <!-- TODO Can ydoc handle java5? -->

    <goal name="drools-jdk5-maven">
      <j:choose>
        <j:when test="${context.getVariable('drools.jdk5.home') == null}">
          <ant:echo message="Skipping ${goal} for ${drools.jdk5.projects}: 'drools.jdk5.home' not defined"/>
        </j:when>

        <j:otherwise>
          <u:tokenize var="projects" delim=",">${drools.jdk5.projects}</u:tokenize>
          <j:forEach var="jdk5.project.file" items="${projects}">
              <ant:echo>
+-------------------------------------------------
| Executing JDK5 Project: ${jdk5.project.file}
+-------------------------------------------------
              </ant:echo>
              <ant:java
                classname="com.werken.forehead.Forehead"
                jvm="${drools.jdk5.home}/bin/java"
                fork="yes">
                <jvmarg value="-Djava.home=${drools.jdk5.home}"/>
                <jvmarg value="-Dmaven.home=${maven.home}"/>
                <jvmarg value="-Djavax.xml.parsers.SAXParserFactory=${javax.xml.parsers.SAXParserFactory}"/>
                <jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=${javax.xml.parsers.DocumentBuilderFactory}"/>
                <jvmarg value="-Djava.endorsed.dirs=${drools.jdk5.home}/lib/endorsed${path.separator}${maven.home}/lib/endorsed"/>
                <jvmarg value="-Dtools.jar=${drools.jdk5.home}/lib/tools.jar"/>
                <jvmarg value="-Dforehead.conf.file=${forehead.conf.file}"/>
                <arg value="-b"/>
                <arg value="-p${jdk5.project.file}"/>
                <arg value="${goal}"/>
                <classpath>
                  <pathelement path="${java.class.path}"/>
                </classpath>
              </ant:java>
          </j:forEach>
        </j:otherwise>
      </j:choose>
    </goal>
</project>

